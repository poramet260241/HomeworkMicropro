
hw8_5_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000810  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ae  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000408  00000000  00000000  0000124a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cd  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000159  00000000  00000000  00001b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001c5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  88:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Switch_RED_LED_on>:
	Switch_RED_LED_off();
	while(1){}
}

void Switch_RED_LED_on(void){
	PORTD &= 0b11011111;
  90:	5d 98       	cbi	0x0b, 5	; 11
  92:	08 95       	ret

00000094 <Switch_GREEN_LED_on>:
}

void Switch_GREEN_LED_on(void){
	PORTD &= 0b11101111;
  94:	5c 98       	cbi	0x0b, 4	; 11
  96:	08 95       	ret

00000098 <Switch_RED_LED_off>:
}

void Switch_RED_LED_off(void){
	PORTD &= 0b00100000;
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	80 72       	andi	r24, 0x20	; 32
  9c:	8b b9       	out	0x0b, r24	; 11
  9e:	08 95       	ret

000000a0 <Switch_GREEN_LED_off>:
}

void Switch_GREEN_LED_off(void){
	PORTD &= 0b00010000;
  a0:	8b b1       	in	r24, 0x0b	; 11
  a2:	80 71       	andi	r24, 0x10	; 16
  a4:	8b b9       	out	0x0b, r24	; 11
  a6:	08 95       	ret

000000a8 <main>:

void Swich_RED_LED_off(void);
void Swich_GREEN_LED_off(void);

int main(void){
	DDRC = 0b111;
  a8:	87 e0       	ldi	r24, 0x07	; 7
  aa:	87 b9       	out	0x07, r24	; 7
	DDRB = 0b0000;
  ac:	14 b8       	out	0x04, r1	; 4
	DDRD = 0b11110111;
  ae:	87 ef       	ldi	r24, 0xF7	; 247
  b0:	8a b9       	out	0x0a, r24	; 10
	EICRA = 0b1000;
  b2:	88 e0       	ldi	r24, 0x08	; 8
  b4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK = 0x02;
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	8d bb       	out	0x1d, r24	; 29
	sei();
  bc:	78 94       	sei
	
	PORTB = 0x0F;
  be:	8f e0       	ldi	r24, 0x0F	; 15
  c0:	85 b9       	out	0x05, r24	; 5
	PORTC = 0b000;
  c2:	18 b8       	out	0x08, r1	; 8
	PORTD |= (1<<3);
  c4:	5b 9a       	sbi	0x0b, 3	; 11
	Switch_GREEN_LED_off();
  c6:	0e 94 50 00 	call	0xa0	; 0xa0 <Switch_GREEN_LED_off>
	Switch_RED_LED_off();
  ca:	0e 94 4c 00 	call	0x98	; 0x98 <Switch_RED_LED_off>
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x26>

000000d0 <Blynk_RED_LED>:
void Switch_GREEN_LED_off(void){
	PORTD &= 0b00010000;
}

void Blynk_RED_LED(void){
	Switch_RED_LED_on();
  d0:	0e 94 48 00 	call	0x90	; 0x90 <Switch_RED_LED_on>
	//_delay_ms(500);
	Switch_RED_LED_off();
  d4:	0e 94 4c 00 	call	0x98	; 0x98 <Switch_RED_LED_off>
  d8:	08 95       	ret

000000da <Blynk_GREEN_LED>:
	//_delay_ms(500);
}

void Blynk_GREEN_LED(void){
	Switch_GREEN_LED_on();
  da:	0e 94 4a 00 	call	0x94	; 0x94 <Switch_GREEN_LED_on>
	//_delay_ms(500);
	Switch_GREEN_LED_off();
  de:	0e 94 50 00 	call	0xa0	; 0xa0 <Switch_GREEN_LED_off>
  e2:	08 95       	ret

000000e4 <__vector_2>:
	//_delay_ms(500);
}

ISR(INT1_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
	PressedKey = -1;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PressedKey>
	n = 1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				case 0b1110:	PressedKey = 0;
				break;
			}
		}
		else if(n == 3){
			PORTC = 0b011;
 116:	33 e0       	ldi	r19, 0x03	; 3
			//_delay_ms(10);
			switch(PINB & 0x0F){
				case 0b0111:	PressedKey = 3;
				break;
				case 0b1011:	PressedKey = 6;
 118:	96 e0       	ldi	r25, 0x06	; 6
				break;
				case 0b1101:	PressedKey = 9;
 11a:	b9 e0       	ldi	r27, 0x09	; 9
				break;
				case 0b1110:	PressedKey = 11;
 11c:	ab e0       	ldi	r26, 0x0B	; 11
				case 0b1110:	PressedKey = 10;
								break;
			}
		}
		else if(n == 2){
			PORTC = 0b101;
 11e:	25 e0       	ldi	r18, 0x05	; 5
			switch(PINB & 0x0F){
				case 0b0111:	PressedKey = 2;
				break;
				case 0b1011:	PressedKey = 5;
				break;
				case 0b1101:	PressedKey = 8;
 120:	f8 e0       	ldi	r31, 0x08	; 8
		}
		else if(n == 2){
			PORTC = 0b101;
			//_delay_ms(10);
			switch(PINB & 0x0F){
				case 0b0111:	PressedKey = 2;
 122:	e2 e0       	ldi	r30, 0x02	; 2
			PORTC = 0b110;
			//_delay_ms(10);
			switch(PINB & 0x0F){
				case 0b0111:	PressedKey = 1;
								break;
				case 0b1011:	PressedKey = 4;
 124:	74 e0       	ldi	r23, 0x04	; 4
								break;
				case 0b1101:	PressedKey = 7;
 126:	67 e0       	ldi	r22, 0x07	; 7
								break;
				case 0b1110:	PressedKey = 10;
 128:	5a e0       	ldi	r21, 0x0A	; 10
	do{
		if(n == 1){
			PORTC = 0b110;
			//_delay_ms(10);
			switch(PINB & 0x0F){
				case 0b0111:	PressedKey = 1;
 12a:	41 e0       	ldi	r20, 0x01	; 1

ISR(INT1_vect){
	PressedKey = -1;
	n = 1;
	do{
		if(n == 1){
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	d1 f4       	brne	.+52     	; 0x168 <__vector_2+0x84>
			PORTC = 0b110;
 134:	98 b9       	out	0x08, r25	; 8
			//_delay_ms(10);
			switch(PINB & 0x0F){
 136:	83 b1       	in	r24, 0x03	; 3
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	8b 30       	cpi	r24, 0x0B	; 11
 13c:	61 f0       	breq	.+24     	; 0x156 <__vector_2+0x72>
 13e:	18 f4       	brcc	.+6      	; 0x146 <__vector_2+0x62>
 140:	87 30       	cpi	r24, 0x07	; 7
 142:	31 f0       	breq	.+12     	; 0x150 <__vector_2+0x6c>
 144:	48 c0       	rjmp	.+144    	; 0x1d6 <__vector_2+0xf2>
 146:	8d 30       	cpi	r24, 0x0D	; 13
 148:	49 f0       	breq	.+18     	; 0x15c <__vector_2+0x78>
 14a:	8e 30       	cpi	r24, 0x0E	; 14
 14c:	51 f0       	breq	.+20     	; 0x162 <__vector_2+0x7e>
 14e:	43 c0       	rjmp	.+134    	; 0x1d6 <__vector_2+0xf2>
				case 0b0111:	PressedKey = 1;
 150:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <PressedKey>
								break;
 154:	40 c0       	rjmp	.+128    	; 0x1d6 <__vector_2+0xf2>
				case 0b1011:	PressedKey = 4;
 156:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <PressedKey>
								break;
 15a:	3d c0       	rjmp	.+122    	; 0x1d6 <__vector_2+0xf2>
				case 0b1101:	PressedKey = 7;
 15c:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <PressedKey>
								break;
 160:	3a c0       	rjmp	.+116    	; 0x1d6 <__vector_2+0xf2>
				case 0b1110:	PressedKey = 10;
 162:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <PressedKey>
								break;
 166:	37 c0       	rjmp	.+110    	; 0x1d6 <__vector_2+0xf2>
			}
		}
		else if(n == 2){
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	d1 f4       	brne	.+52     	; 0x1a0 <__vector_2+0xbc>
			PORTC = 0b101;
 16c:	28 b9       	out	0x08, r18	; 8
			//_delay_ms(10);
			switch(PINB & 0x0F){
 16e:	83 b1       	in	r24, 0x03	; 3
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	8b 30       	cpi	r24, 0x0B	; 11
 174:	61 f0       	breq	.+24     	; 0x18e <__vector_2+0xaa>
 176:	18 f4       	brcc	.+6      	; 0x17e <__vector_2+0x9a>
 178:	87 30       	cpi	r24, 0x07	; 7
 17a:	31 f0       	breq	.+12     	; 0x188 <__vector_2+0xa4>
 17c:	2c c0       	rjmp	.+88     	; 0x1d6 <__vector_2+0xf2>
 17e:	8d 30       	cpi	r24, 0x0D	; 13
 180:	49 f0       	breq	.+18     	; 0x194 <__vector_2+0xb0>
 182:	8e 30       	cpi	r24, 0x0E	; 14
 184:	51 f0       	breq	.+20     	; 0x19a <__vector_2+0xb6>
 186:	27 c0       	rjmp	.+78     	; 0x1d6 <__vector_2+0xf2>
				case 0b0111:	PressedKey = 2;
 188:	e0 93 01 01 	sts	0x0101, r30	; 0x800101 <PressedKey>
				break;
 18c:	24 c0       	rjmp	.+72     	; 0x1d6 <__vector_2+0xf2>
				case 0b1011:	PressedKey = 5;
 18e:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <PressedKey>
				break;
 192:	21 c0       	rjmp	.+66     	; 0x1d6 <__vector_2+0xf2>
				case 0b1101:	PressedKey = 8;
 194:	f0 93 01 01 	sts	0x0101, r31	; 0x800101 <PressedKey>
				break;
 198:	1e c0       	rjmp	.+60     	; 0x1d6 <__vector_2+0xf2>
				case 0b1110:	PressedKey = 0;
 19a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <PressedKey>
				break;
 19e:	1b c0       	rjmp	.+54     	; 0x1d6 <__vector_2+0xf2>
			}
		}
		else if(n == 3){
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	c9 f4       	brne	.+50     	; 0x1d6 <__vector_2+0xf2>
			PORTC = 0b011;
 1a4:	38 b9       	out	0x08, r19	; 8
			//_delay_ms(10);
			switch(PINB & 0x0F){
 1a6:	83 b1       	in	r24, 0x03	; 3
 1a8:	8f 70       	andi	r24, 0x0F	; 15
 1aa:	8b 30       	cpi	r24, 0x0B	; 11
 1ac:	61 f0       	breq	.+24     	; 0x1c6 <__vector_2+0xe2>
 1ae:	18 f4       	brcc	.+6      	; 0x1b6 <__vector_2+0xd2>
 1b0:	87 30       	cpi	r24, 0x07	; 7
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <__vector_2+0xdc>
 1b4:	10 c0       	rjmp	.+32     	; 0x1d6 <__vector_2+0xf2>
 1b6:	8d 30       	cpi	r24, 0x0D	; 13
 1b8:	49 f0       	breq	.+18     	; 0x1cc <__vector_2+0xe8>
 1ba:	8e 30       	cpi	r24, 0x0E	; 14
 1bc:	51 f0       	breq	.+20     	; 0x1d2 <__vector_2+0xee>
 1be:	0b c0       	rjmp	.+22     	; 0x1d6 <__vector_2+0xf2>
				case 0b0111:	PressedKey = 3;
 1c0:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <PressedKey>
				break;
 1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <__vector_2+0xf2>
				case 0b1011:	PressedKey = 6;
 1c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <PressedKey>
				break;
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <__vector_2+0xf2>
				case 0b1101:	PressedKey = 9;
 1cc:	b0 93 01 01 	sts	0x0101, r27	; 0x800101 <PressedKey>
				break;
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <__vector_2+0xf2>
				case 0b1110:	PressedKey = 11;
 1d2:	a0 93 01 01 	sts	0x0101, r26	; 0x800101 <PressedKey>
				break;
			}
		}
		n++;
 1d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	} while (n<=3);
 1e0:	84 30       	cpi	r24, 0x04	; 4
 1e2:	0c f4       	brge	.+2      	; 0x1e6 <__vector_2+0x102>
 1e4:	a3 cf       	rjmp	.-186    	; 0x12c <__vector_2+0x48>
	
	if(PressedKey == 0){
 1e6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PressedKey>
 1ea:	81 11       	cpse	r24, r1
 1ec:	0b c0       	rjmp	.+22     	; 0x204 <__vector_2+0x120>
		for(int i=0;i<5;i++)
			Blynk_RED_LED();
 1ee:	0e 94 68 00 	call	0xd0	; 0xd0 <Blynk_RED_LED>
 1f2:	0e 94 68 00 	call	0xd0	; 0xd0 <Blynk_RED_LED>
 1f6:	0e 94 68 00 	call	0xd0	; 0xd0 <Blynk_RED_LED>
 1fa:	0e 94 68 00 	call	0xd0	; 0xd0 <Blynk_RED_LED>
 1fe:	0e 94 68 00 	call	0xd0	; 0xd0 <Blynk_RED_LED>
 202:	0f c0       	rjmp	.+30     	; 0x222 <__vector_2+0x13e>
	}
	else if(PressedKey != -1){
		for(int i=0;i<PressedKey;i++)
 204:	18 16       	cp	r1, r24
 206:	6c f4       	brge	.+26     	; 0x222 <__vector_2+0x13e>
 208:	c0 e0       	ldi	r28, 0x00	; 0
 20a:	d0 e0       	ldi	r29, 0x00	; 0
			Blynk_GREEN_LED();	
 20c:	0e 94 6d 00 	call	0xda	; 0xda <Blynk_GREEN_LED>
	if(PressedKey == 0){
		for(int i=0;i<5;i++)
			Blynk_RED_LED();
	}
	else if(PressedKey != -1){
		for(int i=0;i<PressedKey;i++)
 210:	21 96       	adiw	r28, 0x01	; 1
 212:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PressedKey>
 216:	08 2e       	mov	r0, r24
 218:	00 0c       	add	r0, r0
 21a:	99 0b       	sbc	r25, r25
 21c:	c8 17       	cp	r28, r24
 21e:	d9 07       	cpc	r29, r25
 220:	ac f3       	brlt	.-22     	; 0x20c <__vector_2+0x128>
			Blynk_GREEN_LED();	
	}
	PORTC = 0b000;
 222:	18 b8       	out	0x08, r1	; 8
}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
