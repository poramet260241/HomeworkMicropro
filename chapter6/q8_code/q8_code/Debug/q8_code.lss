
q8_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b4  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bb  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d8  00000000  00000000  000010d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000169  00000000  00000000  00001775  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000018de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

int main(void){
	DDRB = 0x00;
  80:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x00;
  82:	17 b8       	out	0x07, r1	; 7
	DDRD = 0xFF;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8a b9       	out	0x0a, r24	; 10
		dipsw4 &= 0x0F;
		
		if(dipsw4 == 0){
			for(int i = 0; i<8 ;i++){
				if(i == 0)
					PORTD = 0x80;
  88:	40 e8       	ldi	r20, 0x80	; 128
	DDRD = 0xFF;
	
	int8_t dipsw8, dipsw4, result;
	
	while(1){
		dipsw8 = PINB;
  8a:	83 b1       	in	r24, 0x03	; 3
		dipsw4 = PINC;
  8c:	66 b1       	in	r22, 0x06	; 6
		dipsw4 &= 0x0F;
  8e:	6f 70       	andi	r22, 0x0F	; 15
		
		if(dipsw4 == 0){
  90:	21 f0       	breq	.+8      	; 0x9a <main+0x1a>
  92:	29 c0       	rjmp	.+82     	; 0xe6 <main+0x66>
  94:	2f 5f       	subi	r18, 0xFF	; 255
  96:	3f 4f       	sbci	r19, 0xFF	; 255
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x1e>
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
			for(int i = 0; i<8 ;i++){
				if(i == 0)
  9e:	21 30       	cpi	r18, 0x01	; 1
  a0:	31 05       	cpc	r19, r1
  a2:	71 f4       	brne	.+28     	; 0xc0 <main+0x40>
					PORTD = 0x80;
  a4:	4b b9       	out	0x0b, r20	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	5f e3       	ldi	r21, 0x3F	; 63
  a8:	8d e0       	ldi	r24, 0x0D	; 13
  aa:	93 e0       	ldi	r25, 0x03	; 3
  ac:	51 50       	subi	r21, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x2c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x36>
  b6:	00 00       	nop
				else
					PORTD = (PORTD>>1);
				_delay_ms(1000);
				if((PINC & 0x0F) != 0)
  b8:	86 b1       	in	r24, 0x06	; 6
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	59 f3       	breq	.-42     	; 0x94 <main+0x14>
  be:	e5 cf       	rjmp	.-54     	; 0x8a <main+0xa>
		if(dipsw4 == 0){
			for(int i = 0; i<8 ;i++){
				if(i == 0)
					PORTD = 0x80;
				else
					PORTD = (PORTD>>1);
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	86 95       	lsr	r24
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	5f e3       	ldi	r21, 0x3F	; 63
  c8:	8d e0       	ldi	r24, 0x0D	; 13
  ca:	93 e0       	ldi	r25, 0x03	; 3
  cc:	51 50       	subi	r21, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x4c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x56>
  d6:	00 00       	nop
				_delay_ms(1000);
				if((PINC & 0x0F) != 0)
  d8:	86 b1       	in	r24, 0x06	; 6
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	b1 f6       	brne	.-84     	; 0x8a <main+0xa>
		dipsw8 = PINB;
		dipsw4 = PINC;
		dipsw4 &= 0x0F;
		
		if(dipsw4 == 0){
			for(int i = 0; i<8 ;i++){
  de:	28 30       	cpi	r18, 0x08	; 8
  e0:	31 05       	cpc	r19, r1
  e2:	c4 f2       	brlt	.-80     	; 0x94 <main+0x14>
  e4:	d2 cf       	rjmp	.-92     	; 0x8a <main+0xa>
				if((PINC & 0x0F) != 0)
					break;
			}
		}
		else{
			result = dipsw8/dipsw4;
  e6:	08 2e       	mov	r0, r24
  e8:	00 0c       	add	r0, r0
  ea:	99 0b       	sbc	r25, r25
  ec:	06 2e       	mov	r0, r22
  ee:	00 0c       	add	r0, r0
  f0:	77 0b       	sbc	r23, r23
  f2:	0e 94 95 00 	call	0x12a	; 0x12a <__divmodhi4>
			if(result < 0){
  f6:	66 23       	and	r22, r22
  f8:	b4 f4       	brge	.+44     	; 0x126 <main+0xa6>
				PORTD = result;
  fa:	6b b9       	out	0x0b, r22	; 11
  fc:	2f e3       	ldi	r18, 0x3F	; 63
  fe:	5d e0       	ldi	r21, 0x0D	; 13
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	21 50       	subi	r18, 0x01	; 1
 104:	50 40       	sbci	r21, 0x00	; 0
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x82>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x8c>
 10c:	00 00       	nop
				_delay_ms(1000);
				PORTD &= 0x00;
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	1b b8       	out	0x0b, r1	; 11
 112:	9f e3       	ldi	r25, 0x3F	; 63
 114:	2d e0       	ldi	r18, 0x0D	; 13
 116:	53 e0       	ldi	r21, 0x03	; 3
 118:	91 50       	subi	r25, 0x01	; 1
 11a:	20 40       	sbci	r18, 0x00	; 0
 11c:	50 40       	sbci	r21, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x98>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0xa2>
 122:	00 00       	nop
 124:	b2 cf       	rjmp	.-156    	; 0x8a <main+0xa>
				_delay_ms(1000);
			}
			else
				PORTD = result;
 126:	6b b9       	out	0x0b, r22	; 11
 128:	b0 cf       	rjmp	.-160    	; 0x8a <main+0xa>

0000012a <__divmodhi4>:
 12a:	97 fb       	bst	r25, 7
 12c:	07 2e       	mov	r0, r23
 12e:	16 f4       	brtc	.+4      	; 0x134 <__divmodhi4+0xa>
 130:	00 94       	com	r0
 132:	07 d0       	rcall	.+14     	; 0x142 <__divmodhi4_neg1>
 134:	77 fd       	sbrc	r23, 7
 136:	09 d0       	rcall	.+18     	; 0x14a <__divmodhi4_neg2>
 138:	0e 94 a9 00 	call	0x152	; 0x152 <__udivmodhi4>
 13c:	07 fc       	sbrc	r0, 7
 13e:	05 d0       	rcall	.+10     	; 0x14a <__divmodhi4_neg2>
 140:	3e f4       	brtc	.+14     	; 0x150 <__divmodhi4_exit>

00000142 <__divmodhi4_neg1>:
 142:	90 95       	com	r25
 144:	81 95       	neg	r24
 146:	9f 4f       	sbci	r25, 0xFF	; 255
 148:	08 95       	ret

0000014a <__divmodhi4_neg2>:
 14a:	70 95       	com	r23
 14c:	61 95       	neg	r22
 14e:	7f 4f       	sbci	r23, 0xFF	; 255

00000150 <__divmodhi4_exit>:
 150:	08 95       	ret

00000152 <__udivmodhi4>:
 152:	aa 1b       	sub	r26, r26
 154:	bb 1b       	sub	r27, r27
 156:	51 e1       	ldi	r21, 0x11	; 17
 158:	07 c0       	rjmp	.+14     	; 0x168 <__udivmodhi4_ep>

0000015a <__udivmodhi4_loop>:
 15a:	aa 1f       	adc	r26, r26
 15c:	bb 1f       	adc	r27, r27
 15e:	a6 17       	cp	r26, r22
 160:	b7 07       	cpc	r27, r23
 162:	10 f0       	brcs	.+4      	; 0x168 <__udivmodhi4_ep>
 164:	a6 1b       	sub	r26, r22
 166:	b7 0b       	sbc	r27, r23

00000168 <__udivmodhi4_ep>:
 168:	88 1f       	adc	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	5a 95       	dec	r21
 16e:	a9 f7       	brne	.-22     	; 0x15a <__udivmodhi4_loop>
 170:	80 95       	com	r24
 172:	90 95       	com	r25
 174:	bc 01       	movw	r22, r24
 176:	cd 01       	movw	r24, r26
 178:	08 95       	ret

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
