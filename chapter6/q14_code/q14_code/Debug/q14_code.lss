
q14_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000697  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d7  00000000  00000000  000008d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000323  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000340  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e4  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	5d 00       	.word	0x005d	; ????
  56:	49 00       	.word	0x0049	; ????
  58:	4b 00       	.word	0x004b	; ????
  5a:	4d 00       	.word	0x004d	; ????
  5c:	4f 00       	.word	0x004f	; ????
  5e:	51 00       	.word	0x0051	; ????
  60:	53 00       	.word	0x0053	; ????
  62:	55 00       	.word	0x0055	; ????
  64:	57 00       	.word	0x0057	; ????
  66:	59 00       	.word	0x0059	; ????

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  78:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <bcd27seg>:
#define  F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

uint8_t bcd27seg(uint8_t d){
	switch (d)
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	8a 30       	cpi	r24, 0x0A	; 10
  84:	91 05       	cpc	r25, r1
  86:	b8 f4       	brcc	.+46     	; 0xb6 <bcd27seg+0x36>
  88:	fc 01       	movw	r30, r24
  8a:	e6 5d       	subi	r30, 0xD6	; 214
  8c:	ff 4f       	sbci	r31, 0xFF	; 255
  8e:	0c 94 a4 00 	jmp	0x148	; 0x148 <__tablejump2__>
	{
		case 0: return 0xC0;
		case 1: return 0xF9;
  92:	89 ef       	ldi	r24, 0xF9	; 249
  94:	08 95       	ret
		case 2: return 0xA4;
  96:	84 ea       	ldi	r24, 0xA4	; 164
  98:	08 95       	ret
		case 3: return 0xB0;
  9a:	80 eb       	ldi	r24, 0xB0	; 176
  9c:	08 95       	ret
		case 4: return 0x99;
  9e:	89 e9       	ldi	r24, 0x99	; 153
  a0:	08 95       	ret
		case 5: return 0x92;
  a2:	82 e9       	ldi	r24, 0x92	; 146
  a4:	08 95       	ret
		case 6: return 0x82;
  a6:	82 e8       	ldi	r24, 0x82	; 130
  a8:	08 95       	ret
		case 7: return 0xF8;
  aa:	88 ef       	ldi	r24, 0xF8	; 248
  ac:	08 95       	ret
		case 8: return 0x80;
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	08 95       	ret
		case 9: return 0x90;
  b2:	80 e9       	ldi	r24, 0x90	; 144
  b4:	08 95       	ret
		default: return 0x40;
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	08 95       	ret
#include <util/delay.h>

uint8_t bcd27seg(uint8_t d){
	switch (d)
	{
		case 0: return 0xC0;
  ba:	80 ec       	ldi	r24, 0xC0	; 192
		case 7: return 0xF8;
		case 8: return 0x80;
		case 9: return 0x90;
		default: return 0x40;
	}
}
  bc:	08 95       	ret

000000be <main>:

int main(void)
{
	DDRA = 0x00;
  be:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0x00;
  c0:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
  c6:	81 bb       	out	0x11, r24	; 17
	
	uint8_t dipsw1, dipsw2, mode_sel;
	int8_t c10 = 0;
	int8_t c01 = 0;	
  c8:	c0 e0       	ldi	r28, 0x00	; 0
	DDRB = 0x00;
	DDRC = 0xFF;
	DDRD = 0xFF;
	
	uint8_t dipsw1, dipsw2, mode_sel;
	int8_t c10 = 0;
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	19 e0       	ldi	r17, 0x09	; 9
	int8_t c01 = 0;	
	
    while (1) 
    {
		dipsw1 = PINA;
  ce:	89 b3       	in	r24, 0x19	; 25
		dipsw1 &= 0x0F;
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	8a 30       	cpi	r24, 0x0A	; 10
  d4:	08 f0       	brcs	.+2      	; 0xd8 <main+0x1a>
  d6:	81 2f       	mov	r24, r17
		if(dipsw1 > 9)
			dipsw1 = 9;
		
		dipsw2 = PINB;
  d8:	26 b3       	in	r18, 0x16	; 22
		dipsw2 &= 0x0F;
  da:	2f 70       	andi	r18, 0x0F	; 15
  dc:	2a 30       	cpi	r18, 0x0A	; 10
  de:	08 f0       	brcs	.+2      	; 0xe2 <main+0x24>
  e0:	21 2f       	mov	r18, r17
		if(dipsw2 > 9)
			dipsw2 = 9;
		
		mode_sel = (PINB >> 7) ;		
		
		if(mode_sel){
  e2:	b7 9b       	sbis	0x16, 7	; 22
  e4:	19 c0       	rjmp	.+50     	; 0x118 <main+0x5a>
			c01++;
  e6:	cf 5f       	subi	r28, 0xFF	; 255
			if(c01 == 10){
  e8:	ca 30       	cpi	r28, 0x0A	; 10
  ea:	11 f4       	brne	.+4      	; 0xf0 <main+0x32>
				c01 = 0;
				c10++;
  ec:	df 5f       	subi	r29, 0xFF	; 255
		mode_sel = (PINB >> 7) ;		
		
		if(mode_sel){
			c01++;
			if(c01 == 10){
				c01 = 0;
  ee:	c0 e0       	ldi	r28, 0x00	; 0
				c10++;
			}
			if(c10 >= dipsw1){
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	4d 2f       	mov	r20, r29
  f4:	0d 2e       	mov	r0, r29
  f6:	00 0c       	add	r0, r0
  f8:	55 0b       	sbc	r21, r21
  fa:	48 17       	cp	r20, r24
  fc:	59 07       	cpc	r21, r25
  fe:	ac f0       	brlt	.+42     	; 0x12a <main+0x6c>
				if(c01 > dipsw2){
 100:	82 2f       	mov	r24, r18
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	2c 2f       	mov	r18, r28
 106:	0c 2e       	mov	r0, r28
 108:	00 0c       	add	r0, r0
 10a:	33 0b       	sbc	r19, r19
 10c:	82 17       	cp	r24, r18
 10e:	93 07       	cpc	r25, r19
 110:	64 f4       	brge	.+24     	; 0x12a <main+0x6c>
					c01 = 0;
 112:	c0 e0       	ldi	r28, 0x00	; 0
					c10 = 0;
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	09 c0       	rjmp	.+18     	; 0x12a <main+0x6c>
				}
			}
		}
		else{
			c01--;
 118:	c1 50       	subi	r28, 0x01	; 1
			if(c01 < 0){
 11a:	3a f4       	brpl	.+14     	; 0x12a <main+0x6c>
				if(c10 <= 0){
 11c:	1d 16       	cp	r1, r29
 11e:	1c f0       	brlt	.+6      	; 0x126 <main+0x68>
					c10 = dipsw1;
 120:	d8 2f       	mov	r29, r24
					c01 = dipsw2;
 122:	c2 2f       	mov	r28, r18
 124:	02 c0       	rjmp	.+4      	; 0x12a <main+0x6c>
				}
				else{
					c01 = 9;
					c10--;
 126:	d1 50       	subi	r29, 0x01	; 1
				if(c10 <= 0){
					c10 = dipsw1;
					c01 = dipsw2;
				}
				else{
					c01 = 9;
 128:	c9 e0       	ldi	r28, 0x09	; 9
					c10--;
				}
			}
		}
		PORTC = bcd27seg(c10);
 12a:	8d 2f       	mov	r24, r29
 12c:	0e 94 40 00 	call	0x80	; 0x80 <bcd27seg>
 130:	85 bb       	out	0x15, r24	; 21
		PORTD = bcd27seg(c01);
 132:	8c 2f       	mov	r24, r28
 134:	0e 94 40 00 	call	0x80	; 0x80 <bcd27seg>
 138:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	8f e4       	ldi	r24, 0x4F	; 79
 13c:	93 ec       	ldi	r25, 0xC3	; 195
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x80>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x86>
 144:	00 00       	nop
 146:	c3 cf       	rjmp	.-122    	; 0xce <main+0x10>

00000148 <__tablejump2__>:
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	05 90       	lpm	r0, Z+
 14e:	f4 91       	lpm	r31, Z
 150:	e0 2d       	mov	r30, r0
 152:	09 94       	ijmp

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
