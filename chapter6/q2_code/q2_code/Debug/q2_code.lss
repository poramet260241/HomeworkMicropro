
q2_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071e  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068b  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023e  00000000  00000000  00000f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000364  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008b  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <gray_to_bin>:
	return (bin>>1)^bin;
}

unsigned char gray_to_bin(unsigned char gray)
{
	gray ^= (gray >> 4);
  80:	98 2f       	mov	r25, r24
  82:	92 95       	swap	r25
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	89 27       	eor	r24, r25
	gray ^= (gray >> 2);
  88:	98 2f       	mov	r25, r24
  8a:	96 95       	lsr	r25
  8c:	96 95       	lsr	r25
  8e:	89 27       	eor	r24, r25
	gray ^= (gray >> 1);
  90:	98 2f       	mov	r25, r24
  92:	96 95       	lsr	r25
	return gray;
}
  94:	89 27       	eor	r24, r25
  96:	08 95       	ret

00000098 <main>:

int main(void){
	DDRB = 0x00;
  98:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x00;
  9a:	17 b8       	out	0x07, r1	; 7
	DDRD = 0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8a b9       	out	0x0a, r24	; 10
	
	unsigned char dip_in;
	
	while(1){
		dip_in = PINB;
  a0:	83 b1       	in	r24, 0x03	; 3
		if(PINC & 0x01)
  a2:	30 9b       	sbis	0x06, 0	; 6
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <main+0x18>
#include <avr/io.h>

unsigned char bin_to_gray(unsigned char bin){
	return (bin>>1)^bin;
  a6:	98 2f       	mov	r25, r24
  a8:	96 95       	lsr	r25
  aa:	89 27       	eor	r24, r25
	unsigned char dip_in;
	
	while(1){
		dip_in = PINB;
		if(PINC & 0x01)
			PORTD = bin_to_gray(dip_in);
  ac:	8b b9       	out	0x0b, r24	; 11
  ae:	f8 cf       	rjmp	.-16     	; 0xa0 <main+0x8>
		else
			PORTD = gray_to_bin(dip_in);
  b0:	0e 94 40 00 	call	0x80	; 0x80 <gray_to_bin>
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	f4 cf       	rjmp	.-24     	; 0xa0 <main+0x8>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
